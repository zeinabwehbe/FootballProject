"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const body_parser_1 = __importDefault(require("body-parser"));
const express_1 = __importDefault(require("express"));
const supertest_1 = __importDefault(require("supertest"));
const Yup = __importStar(require("yup"));
const express_yup_middleware_1 = require("./express-yup-middleware");
const createAppWithPath = ({ path, middleware, method = 'get' }) => {
    const app = (0, express_1.default)();
    app.use(body_parser_1.default.json());
    app[method](path, middleware, (_req, res) => res.sendStatus(200));
    return app;
};
describe('express yup middleware', () => {
    let agent = null;
    it('creates an express middleware', () => {
        const expressMiddleware = (0, express_yup_middleware_1.expressYupMiddleware)({ schemaValidator: { schema: {} } });
        expect(typeof expressMiddleware).toBe('function');
    });
    describe('when validating the request query, body and params properties', () => {
        describe('without custom error messages', () => {
            const schemaValidator = {
                schema: {
                    query: {
                        yupSchema: Yup.object().shape({
                            testQueryParam: Yup.string().required('requiredTestQueryParam'),
                        }),
                    },
                    body: {
                        yupSchema: Yup.object().shape({
                            testBodyProperty: Yup.string().required('requiredTestBodyProperty'),
                        }),
                    },
                    params: {
                        yupSchema: Yup.object().shape({
                            testParams: Yup.string().required('requiredTestParams'),
                        }),
                    },
                },
            };
            beforeEach(() => {
                const app = createAppWithPath({
                    path: '/test',
                    middleware: (0, express_yup_middleware_1.expressYupMiddleware)({ schemaValidator }),
                });
                agent = (0, supertest_1.default)(app);
            });
            it('returns a bad request error showing yup validation messages', async () => {
                const { body } = await agent.get('/test').expect(400);
                expect(body).toStrictEqual({
                    errors: {
                        query: [
                            {
                                message: 'requiredTestQueryParam',
                                propertyPath: 'testQueryParam',
                            },
                        ],
                        body: [
                            {
                                message: 'requiredTestBodyProperty',
                                propertyPath: 'testBodyProperty',
                            },
                        ],
                        params: [
                            {
                                message: 'requiredTestParams',
                                propertyPath: 'testParams',
                            },
                        ],
                    },
                });
            });
        });
        describe('using custom error messages', () => {
            const schemaValidator = {
                schema: {
                    body: {
                        yupSchema: Yup.object().shape({
                            testBodyProperty: Yup.string().required('requiredTestBodyProperty'),
                        }),
                    },
                },
                errorMessages: {
                    requiredTestBodyProperty: {
                        key: 'tes-body-property-required',
                        message: 'The "testBodyProperty" property is required!',
                    },
                },
            };
            beforeEach(() => {
                const app = createAppWithPath({
                    path: '/test',
                    middleware: (0, express_yup_middleware_1.expressYupMiddleware)({ schemaValidator }),
                });
                agent = (0, supertest_1.default)(app);
            });
            it('returns a bad request error showing yup validation messages', async () => {
                const { body } = await agent.get('/test').expect(400);
                expect(body).toStrictEqual({
                    errors: {
                        body: [
                            {
                                ...schemaValidator.errorMessages.requiredTestBodyProperty,
                                propertyPath: 'testBodyProperty',
                            },
                        ],
                    },
                });
            });
        });
    });
    describe('using yup validation option', () => {
        describe('abort early', () => {
            const schemaValidator = {
                schema: {
                    body: {
                        yupSchema: Yup.object().shape({
                            firstTestBodyProperty: Yup.string().required('requiredFirstTestBodyProperty'),
                            secondTestBodyProperty: Yup.string().required('requiredSecondTestBodyProperty'),
                        }),
                        validateOptions: {
                            abortEarly: false,
                        },
                    },
                },
            };
            beforeEach(() => {
                const app = createAppWithPath({
                    path: '/test',
                    middleware: (0, express_yup_middleware_1.expressYupMiddleware)({ schemaValidator }),
                });
                agent = (0, supertest_1.default)(app);
            });
            it('returns an array with all the errors when validating multiple error messages on the body', async () => {
                const { body } = await agent.get('/test').expect(400);
                expect(body).toStrictEqual({
                    errors: {
                        body: [
                            {
                                message: 'requiredFirstTestBodyProperty',
                                propertyPath: 'firstTestBodyProperty',
                            },
                            {
                                message: 'requiredSecondTestBodyProperty',
                                propertyPath: 'secondTestBodyProperty',
                            },
                        ],
                    },
                });
            });
        });
    });
    describe('when validating a custom request property', () => {
        const schemaValidator = {
            schema: {
                headers: {
                    yupSchema: Yup.object().shape({
                        testHeaderProperty: Yup.string().required('requiredHeaderProperty'),
                    }),
                },
            },
        };
        beforeEach(() => {
            const app = createAppWithPath({
                path: '/test',
                middleware: (0, express_yup_middleware_1.expressYupMiddleware)({ schemaValidator, propertiesToValidate: ['headers'] }),
            });
            agent = (0, supertest_1.default)(app);
        });
        it('returns a bad request error showing yup validation messages', async () => {
            const { body } = await agent.get('/test').expect(400);
            expect(body).toStrictEqual({
                errors: {
                    headers: [
                        {
                            message: 'requiredHeaderProperty',
                            propertyPath: 'testHeaderProperty',
                        },
                    ],
                },
            });
        });
    });
    describe('when returning a custom validation code', () => {
        const schemaValidator = {
            schema: {
                body: {
                    yupSchema: Yup.object().shape({
                        testProperty: Yup.string().required('required'),
                    }),
                },
            },
        };
        beforeEach(() => {
            const app = createAppWithPath({
                path: '/test',
                middleware: (0, express_yup_middleware_1.expressYupMiddleware)({ schemaValidator, expectedStatusCode: 418 }),
            });
            agent = (0, supertest_1.default)(app);
        });
        it(`returns "I'm a teapot" code 418`, async () => {
            const { body } = await agent.get('/test').expect(418);
            expect(body).toStrictEqual({
                errors: {
                    body: [
                        {
                            message: 'required',
                            propertyPath: 'testProperty',
                        },
                    ],
                },
            });
        });
    });
    describe('when using the request as an Yup context to cross validate', () => {
        const shouldBeOfTypeAccordingTo = (source) => function shouldBeEven(numberToValidate) {
            const mod = numberToValidate % 2;
            const type = this.options.context['payload'][source].type;
            if (!type) {
                return false;
            }
            if (type === 'even')
                return mod === 0;
            if (type === 'odd')
                return mod !== 0;
            return false;
        };
        it('returns a bad request error using a query value within a param validation', async () => {
            const schemaValidator = {
                schema: {
                    params: {
                        yupSchema: Yup.object().shape({
                            numberToValidate: Yup.string().test({
                                message: 'Check if your number correspond with the type given',
                                test: shouldBeOfTypeAccordingTo('query'),
                            }),
                        }),
                    },
                },
            };
            const app = createAppWithPath({
                path: '/test/:numberToValidate',
                middleware: (0, express_yup_middleware_1.expressYupMiddleware)({ schemaValidator }),
            });
            agent = (0, supertest_1.default)(app);
            const { body } = await agent.get('/test/1?type=even').expect(400);
            await agent.get('/test/1?type=odd').expect(200);
            await agent.get('/test/2?type=even').expect(200);
            expect(body).toStrictEqual({
                errors: {
                    params: [
                        {
                            propertyPath: 'numberToValidate',
                            message: 'Check if your number correspond with the type given',
                        },
                    ],
                },
            });
        });
        it('returns a bad request error when the number sent in the payload does not match the type param', async () => {
            const schemaValidator = {
                schema: {
                    body: {
                        yupSchema: Yup.object().shape({
                            numberToValidate: Yup.string().test({
                                message: 'Check if your number corresponds with the given type',
                                test(numberToValidate) {
                                    const mod = numberToValidate % 2;
                                    const type = this.options.context['payload'].params.type;
                                    if (!type) {
                                        return false;
                                    }
                                    if (type === 'even') {
                                        return mod === 0;
                                    }
                                    if (type === 'odd') {
                                        return mod !== 0;
                                    }
                                    return false;
                                },
                            }),
                        }),
                    },
                },
            };
            const app = createAppWithPath({
                path: '/test/:type',
                method: 'post',
                middleware: (0, express_yup_middleware_1.expressYupMiddleware)({ schemaValidator }),
            });
            agent = (0, supertest_1.default)(app);
            const { body } = await agent
                .post('/test/even')
                .send({
                numberToValidate: 1,
            })
                .expect(400);
            await agent
                .post('/test/odd')
                .send({
                numberToValidate: 1,
            })
                .expect(200);
            await agent
                .post('/test/even')
                .send({
                numberToValidate: 2,
            })
                .expect(200);
            expect(body).toStrictEqual({
                errors: {
                    body: [
                        {
                            propertyPath: 'numberToValidate',
                            message: 'Check if your number corresponds with the given type',
                        },
                    ],
                },
            });
        });
    });
});
//# sourceMappingURL=express-yup-middleware.spec.js.map